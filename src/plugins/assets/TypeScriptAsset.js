const TypeScriptAsset = {
  type: 'js',

  async parse(code, state) {
    // require typescript, installed locally in the app
    let typescript = await state.require('typescript');
    let transpilerOptions = {
      compilerOptions: {
        module: typescript.ModuleKind.CommonJS,
        jsx: typescript.JsxEmit.Preserve,

        // it brings the generated output from TypeScript closer to that generated by Babel
        // see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html
        esModuleInterop: true
      },
      fileName: state.relativeName
    };

    let tsconfig = await state.getConfig(['tsconfig.json']);

    // Overwrite default if config is found
    if (tsconfig) {
      transpilerOptions.compilerOptions = Object.assign(
        transpilerOptions.compilerOptions,
        tsconfig.compilerOptions
      );
    }
    transpilerOptions.compilerOptions.noEmit = false;
    transpilerOptions.compilerOptions.sourceMap = state.options.sourceMaps;

    // Transpile Module using TypeScript and parse result as ast format through babylon
    return typescript.transpileModule(code, transpilerOptions);
  },

  async generate({outputText: content, sourceMapText: sourceMap}, state) {
    if (sourceMap) {
      sourceMap = JSON.parse(sourceMap);
      sourceMap.sources = [state.relativeName];
      sourceMap.sourcesContent = [state.contents];

      // Remove the source map URL
      content = content.substring(
        0,
        content.lastIndexOf('//# sourceMappingURL')
      );
    }

    return [
      {
        type: 'js',
        value: content,
        sourceMap
      }
    ];
  }
};

module.exports = {
  Asset: {
    ts: TypeScriptAsset,
    tsx: TypeScriptAsset
  }
};
